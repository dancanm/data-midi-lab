#container
    h1 Compositions (Mockup)
    ul#compositions
        li.a
            h2 A (Mockup)
            div Use trading volume as a signal to start the music (wait for trading volume to reach a certain level), which consists of the variations of trading volume translated to notes in a E2 minor scale. Then, use other features (going up or down, etc.) to determine the nature of the music.
            a.send(href='#',data-message='123',data-foo='34343',data-bar='E2') Send
    h1 Datasets (Mockup)
    ul#datasets
        li.volume_280_tatum
            h2 volume_280_tatum.csv (Mockup)
            ul
                li
                    h3 A (Mockup)
                    div Transformation: Take each bid_volume, normalize it send a note message within a two-octave E2 minor scale for every beat at 140 bpm
                    a.transform(href='#',data-message='123',data-foo='34343',data-bar='E2') Preview
                    .foo
                    a.send(href='#',data-message='123',data-foo='34343',data-bar='E2') Send
                li
                    h3 B (Mockup)
                    div Transformation: Take each bid_volatility, normalize it send a note message within a two-octave E2 minor scale for every beat at 140 bpm
                    a.transform(href='#',data-message='123',data-foo='34343',data-bar='E2') Preview
                    .foo
                    a.send(href='#',data-message='123',data-foo='34343',data-bar='E2') Send
        li.no_data
            h2 Non-data programs
            ul
                li.a
                    h3 Random control data
                    div Transformation: Send a random control message 60 times per every second at 140 bpm for 10 seconds
                    a.transform(href='#',data-dataset='no_data',data-target-type='control',data-rate='60',data-rate-unit='second', data-duration='10',data-duration-unit='seconds',data-destination='ul#datasets li.no_data ul li.a pre.tosend') Preview
                    pre.tosend
                    div.clear
                    a.send(href='#',data-source='ul#datasets li.no_data ul li.a pre.tosend') Send
                li.b
                    h3 Random notes at high frequency
                    div Transformation: Send a random note message [todo: within a two-octave E2 minor scale] 100 times every beat at 140 bpm for 10 seconds
                    a.transform(href='#',data-dataset='no_data',data-target-type='notes',data-key='E2',data-rate='100',data-rate-unit='beat',data-duration='10',data-duration-unit='seconds',data-destination='ul#datasets li.no_data ul li.b pre.tosend') Preview
                    pre.tosend
                    div.clear
                    a.send(href='#',data-source='ul#datasets li.no_data ul li.b pre.tosend') Send
                li.c
                    h3 Random notes in E2 minor scale (TODO)
                    div Transformation: Send a random note message within a two-octave E2 minor scale twice every beat at 140 bpm for 10 seconds
                    a.transform(href='#',data-dataset='no_data',data-target-type='notes',data-key='E2',data-rate='100',data-rate-unit='beat',data-duration='10',data-duration-unit='seconds',data-destination='ul#datasets li.no_data ul li.c pre.tosend') Preview
                    pre.tosend
                    div.clear
                    a.send(href='#',data-source='ul#datasets li.no_data ul li.c pre.tosend') Send
    ul
        items = ["one", "two", "three"]
        each item, i in items
            li #{item}: #{i}
    ul#controller
        li.button 
            a#play(href='#',data-message='250') 
                span Play
        li.button 
            a#stop(href='#',data-message='252') 
                span Stop
        li.button 
            a#record(href='#',data-message='255') 
                span Record
    h1 Keyboard
    span Use this to verify that your synthesizer / music software picks up the MIDI signals properly
    #keyboard
    small Data MIDI Lab - A Node.js-based MIDI Controller and web frontend that allows you to generate MIDI notes and control data from arbitrary chunks of data.
script(type="text/javascript", src="/javascripts/jquery.min.js")
script(type="text/javascript", src="/javascripts/script.js")